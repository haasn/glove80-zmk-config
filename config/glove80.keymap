
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Basic 0
#define LAYER_International 1
#define LAYER_Symbol 2
#define LAYER_Function 3
#define LAYER_Gaming 4
#define LAYER_Magic 5

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */
&lt {
    flavor = "hold-preferred";
};

&sk {
    quick-release;
};

#define SHIFT_OVERRIDE(name, normal, shifted)   \
    name: shifted_##name                      { \
        compatible = "zmk,behavior-mod-morph";  \
        #binding-cells = <0>;                   \
        bindings = <&kp normal>, <&kp shifted>; \
        mods = <(MOD_LSFT|MOD_RSFT)>;           \
    };


/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {
behaviors {
    SHIFT_OVERRIDE(left_par, RS(N9), RS(LEFT_BRACKET))
    SHIFT_OVERRIDE(right_par, RS(N0), RS(RIGHT_BRACKET))
    SHIFT_OVERRIDE(dot_qstn, DOT, RS(SLASH))
    SHIFT_OVERRIDE(cma_slsh, COMMA, SLASH)
    SHIFT_OVERRIDE(und_mns, RS(MINUS), MINUS)

    SHIFT_OVERRIDE(n1, RS(N1), N1)
    SHIFT_OVERRIDE(n2, RS(N2), N2)
    SHIFT_OVERRIDE(n3, RS(N3), N3)
    SHIFT_OVERRIDE(n4, RS(N4), N4)
    SHIFT_OVERRIDE(n5, RS(N5), N5)
    SHIFT_OVERRIDE(n6, RS(N6), N6)
    SHIFT_OVERRIDE(n7, RS(N7), N7)
    SHIFT_OVERRIDE(n8, RS(N8), N8)
    SHIFT_OVERRIDE(n9, RS(COMMA), N9)
    SHIFT_OVERRIDE(n0, RS(PERIOD), N0)

    shift_the: shift_the {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&the>, <&the_upper>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    magic_key: magic_key {
            compatible = "zmk,behavior-antecedent-morph";
            label = "MAGIC_KEY";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&kp O>, <&kp L>, <&kp S>, <&kp G>, <&kp U>, <&kp Y>,
                       <&kp S>, <&kp Y>, <&kp I>, <&kp I>, <&kp O>, <&kp R>,
                       <&kp T>, <&kp G>, <&kp A>, <&kp H>, <&kp U>, <&kp L>,
                       <&kp C>, <&kp M>, <&kp E>, <&kp S>, <&kp S>, <&kp X>,
                       <&kp H>, <&kp S>, <&shift_the>;
            antecedents = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z SPACE>;
            max-delay-ms = <1000>;
    };

    magic_hold_tap: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&magic_key>;
    };
};
};

/* Automatically generated macro definitions */
/ {
    macros {
        the: the {
            label = "&THE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            
            
            bindings
                = <&kp T>
                , <&kp H>
                , <&kp E>;
        };
    the_upper: the_upper {
            label = "&THE_UPPER";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            
            
            bindings
                = <&kp RS(T)>
                , <&kp H>
                , <&kp E>;
        };
    };
};

/* Automatically generated combos definitions */
/ {
    combos {
            compatible = "zmk,combos";
    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {
    
    };
};

/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Basic {
            bindings = <
  &kp LEFT  &kp RIGHT  &kp LC(Q)  &kp C_VOL_DN  &kp C_VOL_UP                                                                                     &kp PSCRN  &kp PAUSE_BREAK     &tog 3     &tog 4  &magic LAYER_Magic 0
     &none        &n1        &n2           &n3           &n4      &n5                                                                       &n6        &n7              &n8        &n9        &n0               &kp F11
 &kp GRAVE      &kp J      &kp U         &kp O         &kp F  &kp SQT                                                                     &kp Z      &kp W            &kp D      &kp L      &kp Q               &kp F12
 &sk LCTRL      &kp I      &kp E         &kp A         &kp H    &kp P                                                                     &kp G      &kp S            &kp T      &kp R      &kp N                &kp F6
 &sk LSHFT  &cma_slsh   &kp SEMI     &dot_qstn         &kp Y    &kp K    &kp TAB      &sl 1   &kp INS  &kp PG_UP  &lt 3 RET    &kp BSPC   &kp V      &kp C            &kp M      &kp X      &kp B                 &none
     &none   &sk LALT   &kp BSLH     &left_par    &right_par           &kp SPACE  &lt 3 ESC  &kp LGUI  &kp PG_DN  &sk RSHFT  &magic_key           &und_mns        &kp MINUS  &kp LC(S)  &kp EQUAL                 &none
            >;
        };

        layer_International {
            bindings = <
 &trans     &trans      &trans        &trans        &trans                                                                      &trans     &trans  &trans  &trans  &trans
 &trans     &trans  &kp RA(N2)    &kp RA(N3)    &kp RA(N5)  &trans                                                   &trans     &trans     &trans  &trans  &trans  &trans
 &trans     &trans   &kp RA(Y)     &kp RA(P)        &trans  &trans                                                   &trans     &trans     &trans  &trans  &trans  &trans
 &trans  &kp RA(I)   &kp RA(L)     &kp RA(Q)        &trans  &trans                                                   &trans  &kp RA(S)     &trans  &trans  &trans  &trans
 &trans     &trans      &trans        &trans     &kp RA(Z)  &trans  &trans  &trans  &kp DEL  &trans  &trans  &trans  &trans  &kp RA(C)  &kp RA(M)  &trans  &trans  &trans
 &trans     &trans      &trans  &kp RA(LBKT)  &kp RA(RBKT)          &trans  &trans   &trans  &trans  &trans  &trans             &trans     &trans  &trans  &trans  &trans
            >;
        };

        layer_Symbol {
            bindings = <
 &trans  &trans         &trans        &trans        &trans                                                                               &trans     &trans     &trans      &trans  &trans
 &trans  &trans         &trans        &trans        &trans         &trans                                                     &trans     &trans     &trans     &trans      &trans  &trans
 &trans   &none      &kp MINUS      &kp LBKT      &kp RBKT  &kp RS(EQUAL)                                                      &none  &kp KP_N7  &kp KP_N8  &kp KP_N9       &none  &trans
 &trans   &none  &kp RS(COMMA)    &kp RS(N9)    &kp RS(N0)    &kp RS(DOT)                                                  &kp EQUAL  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_N0  &trans
 &trans   &none          &none  &kp RS(LBKT)  &kp RS(RBKT)          &none  &trans  &trans  &trans  &trans  &trans  &trans      &none  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT  &trans
 &trans  &trans         &trans        &trans        &trans                 &trans  &trans  &trans  &trans  &trans  &trans                &trans     &trans     &trans      &trans  &trans
            >;
        };

        layer_Function {
            bindings = <
          &trans     &trans     &trans     &trans     &trans                                                                                &trans     &trans     &trans   &trans   &trans
 &kp LC(LA(DEL))     &kp F1     &kp F2     &kp F3     &kp F4     &kp F5                                                          &kp F6     &kp F7     &kp F8     &kp F9  &kp F10  &kp F11
          &trans  &kp LC(W)  &kp LC(Z)  &kp LC(Y)  &kp LC(R)  &kp LC(T)                                                           &none   &kp HOME    &kp END      &none    &none  &kp F12
          &trans      &none      &none      &none      &none      &none                                                        &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT    &none   &trans
          &trans      &none  &kp LC(X)  &kp LC(C)  &kp LC(V)      &none  &trans  &trans  &kp DEL  &trans  &kp LS(RET)  &trans     &none  &kp PG_DN  &kp PG_UP      &none    &none   &trans
          &trans     &trans     &trans   &kp LBKT   &kp RBKT             &trans  &trans   &trans  &trans   &caps_word  &trans               &trans     &trans     &trans   &trans   &trans
            >;
        };

        layer_Gaming {
            bindings = <
 &trans     &trans    &trans  &trans  &trans                                                                      &trans  &trans  &trans  &trans  &trans
 &trans     &kp F5    &kp N1  &kp N2  &kp N3  &kp N4                                                      &trans  &trans  &trans  &trans  &trans  &trans
 &trans      &kp B     &kp Q   &kp W   &kp E   &kp R                                                      &trans  &trans  &trans  &trans  &trans  &trans
 &trans      &kp I     &kp A   &kp S   &kp D   &kp F                                                      &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &kp LSHFT  &kp BSLH   &kp Z   &kp X   &kp C    &kp TAB    &kp Y   &kp L  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &kp LCTRL    &trans  &trans  &trans          &kp SPACE  &kp ESC   &kp M  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Magic {
            bindings = <
       &none            &none         &kp CAPS       &kp KP_NUM         &kp SLCK                                                                                                  &none           &none           &none            &none  &magic LAYER_Magic 0
       &none   &kp LC(LA(F1))   &kp LC(LA(F2))   &kp LC(LA(F3))   &kp LC(LA(F4))   &kp LC(LA(F5))                                                        &kp LC(LA(F6))  &kp LC(LA(F7))  &kp LC(LA(F8))  &kp LC(LA(F9))  &kp LC(LA(F10))       &kp LC(LA(F11))
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                                 &none           &none           &none           &none            &none       &kp LC(LA(F12))
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                                 &none           &none           &none           &none            &none           &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3    &bt BT_CLR   &none   &none   &none           &none           &none           &none           &none            &none            &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none                           &none           &none           &none            &none                 &none
            >;
        };

    };
};
